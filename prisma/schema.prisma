generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otpCode   String   @map("otpcode")
  expiresAt DateTime @map("expires_at")
  isValid   Boolean  @default(true) @map("isvalid")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("otps")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  active    Boolean  @default(true)
  isSuper   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admins")
}

model Category {
  id              Int           @id @default(autoincrement())
  name            String
  active          Boolean       @default(true)
  isDeleted       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  backgroundImage String?
  icon            String?
  color           String?
  meditations     Meditation[]
  subcategories   Subcategory[]

  @@map("categories")
}

model User {
  id               BigInt     @id @default(autoincrement())
  createdAt        DateTime   @default(now()) @map("created_at")
  name             String?
  email            String     @unique
  password         String?
  image            String?
  isVerified       Boolean    @default(false)
  active           Boolean    @default(false)
  signupMethod     String     @default("email") @db.VarChar(20)
  subscriptionType String     @default("free")
  stripeCustomerId String?    // Add for payment tracking
  likedMeditations Liked[]
  playlists        Playlist[]
  userTags         UserTag[]

  subscriptions Subscription[]
  transactions  Transaction[]

  @@map("users")
}

model Meditation {
  id             String               @id @default(cuid())
  title          String
  description    String?
  duration       Int
  link           String
  thumbnail      String?
  isPremium      Boolean              @default(false)
  active         Boolean              @default(true)
  isDeleted      Boolean              @default(false)
  playCount      Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  categoryId     Int
  subcategoryId  String?
  type           String?
  likedUsers     Liked[]
  meditationTags MeditationTags[]
  category       Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory    Subcategory?         @relation(fields: [subcategoryId], references: [id])
  playlistItems  PlaylistMeditation[]

  @@map("meditations")
}

model Tag {
  id                   String                @id @default(cuid())
  name                 String                @unique
  active               Boolean               @default(true)
  isDeleted            Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  meditationTags       MeditationTags[]
  onboardingOptionTags OnboardingOptionTag[]
  userTags             UserTag[]

  @@map("tags")
}

model MeditationTags {
  meditationId String
  tagId        String
  meditation   Meditation @relation(fields: [meditationId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([meditationId, tagId])
  @@map("meditation_tags")
}

model Subcategory {
  id          String       @id @default(uuid())
  name        String
  description String?
  active      Boolean      @default(true)
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  Int
  color       String?
  meditations Meditation[]
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId])
  @@map("subcategories")
}

model Liked {
  id           String     @id @default(uuid())
  userId       BigInt
  meditationId String
  createdAt    DateTime   @default(now())
  meditation   Meditation @relation(fields: [meditationId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, meditationId])
  @@map("liked_meditations")
}

model ThoughtOfTheDay {
  id          String        @id @default(cuid())
  thumbnail   String
  link        String
  title       String
  duration    String
  description String
  scheduledAt DateTime
  status      ThoughtStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Playlist {
  id          String               @id @default(uuid())
  name        String
  icon        String?
  description String?
  isPublic    Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  userId      BigInt
  items       PlaylistMeditation[]
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("playlists")
}

model PlaylistMeditation {
  id           String     @id @default(uuid())
  playlistId   String
  meditationId String
  addedAt      DateTime   @default(now())
  order        Int?
  createdAt    DateTime   @default(now())
  meditation   Meditation @relation(fields: [meditationId], references: [id], onDelete: Cascade)
  playlist     Playlist   @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([playlistId, meditationId])
  @@map("playlist_meditations")
}

model Policy {
  id        String   @id @default(cuid())
  type      Int      @unique
  content   String
  active    Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type, active, isDeleted])
  @@index([type])
  @@map("policy")
}

model OnboardingQuestion {
  id        String             @id @default(uuid())
  question  String
  active    Boolean            @default(true)
  isDeleted Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  options   OnboardingOption[]

  @@index([active, isDeleted])
  @@map("onboarding_questions")
}

model OnboardingOption {
  id         String                @id @default(uuid())
  option     String
  active     Boolean               @default(true)
  isDeleted  Boolean               @default(false)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  questionId String
  tags       OnboardingOptionTag[]
  question   OnboardingQuestion    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@map("onboarding_options")
}

model OnboardingOptionTag {
  id        String           @id @default(uuid())
  optionId  String
  tagId     String
  createdAt DateTime         @default(now())
  option    OnboardingOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  tag       Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([optionId, tagId])
  @@index([optionId])
  @@index([tagId])
  @@map("onboarding_option_tags")
}

model UserTag {
  id        String   @id @default(uuid())
  userId    BigInt
  tagId     String
  createdAt DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@index([userId])
  @@index([tagId])
  @@map("user_tags")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String
  price         Float
  currency      String   @default("usd")
  interval      String
  intervalCount Int      @default(1)
  trialDays     Int?
  stripePriceId String?  @unique
  visible       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscriptions Subscription[]   // ðŸ‘ˆ added this

  @@map("subscription_plans")
}


model Transaction {
  id                    String            @id @default(cuid())
  subscriptionId        String?
  userId                BigInt
  amount                Float
  currency              String            @default("usd")
  status                TransactionStatus @default(PENDING)
  type                  String            @default("SUBSCRIPTION") // Add type field
  stripePaymentIntentId String?           @unique
  stripeInvoiceId       String?
  description           String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("transactions")
}


model Subscription {
  id                   String             @id @default(cuid())
  userId               BigInt
  planId               String
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  stripeSubscriptionId String?            @unique  // Make optional
  stripeCustomerId     String?            // Change from required to optional
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan         SubscriptionPlan @relation(fields: [planId], references: [id])
  transactions Transaction[]

  @@unique([userId, status])
  @@map("subscriptions")
}


model Settings {
  id             String   @id
  tagline        String
  currentVersion String
  supportEmail   String   @unique
  releaseNote    String?
  adminEmail     String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

enum ThoughtStatus {
  PENDING
  POSTED
  REPOSTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
  INCOMPLETE_EXPIRED
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}
