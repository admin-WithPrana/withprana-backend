generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otpCode   String   @map("otpcode")
  expiresAt DateTime @map("expires_at")
  isValid   Boolean  @default(true) @map("isvalid")

  @@map("otps")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  active    Boolean  @default(true)
  isSuper   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admins")
}

model Category {
  id              Int      @id @default(autoincrement())
  name            String
  active          Boolean  @default(true)
  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  backgroundImage String?
  icon            String?
  color           String?

  meditations   Meditation[]
  subcategories Subcategory[]

  @@map("categories")
}

model User {
  id               BigInt   @id @default(autoincrement())
  createdAt        DateTime @default(now()) @map("created_at")
  name             String?
  email            String   @unique
  password         String?
  isVerified       Boolean  @default(false)
  active           Boolean  @default(false)
  signupMethod     String   @default("email")
  subscriptionType String   @default("free")

  @@map("users")
}

model Meditation {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int // in seconds
  link        String // audio/video URL
  thumbnail   String? // thumbnail image URL
  isPremium   Boolean  @default(false)
  active      Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId String?

  // Many-to-many relation via join table
  meditationTags MeditationTags[]

  @@map("meditations")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  active    Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many-to-many relation via join table
  meditationTags MeditationTags[]

  @@map("tags")
}

// Explicit join table for many-to-many relationship
model MeditationTags {
  meditationId String
  tagId        String

  meditation Meditation @relation(fields: [meditationId], references: [id], onDelete: Cascade)
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([meditationId, tagId])
  @@map("meditation_tags")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  active      Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  meditations Meditation[]

  @@unique([name, categoryId])
  @@map("subcategories")
}
