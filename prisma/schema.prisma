generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otpCode   String   @map("otpcode")
  expiresAt DateTime @map("expires_at")
  isValid   Boolean  @default(true) @map("isvalid")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("otps")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  active    Boolean  @default(true)
  isSuper   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("admins")
}

model Category {
  id              Int           @id @default(autoincrement())
  name            String
  active          Boolean       @default(true)
  isDeleted       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  backgroundImage String?
  icon            String?
  color           String?
  meditations     Meditation[]
  subcategories   Subcategory[]

  @@map("categories")
}

model User {
  id               BigInt    @id @default(autoincrement())
  createdAt        DateTime  @default(now()) @map("created_at")
  name             String?
  email            String    @unique
  password         String?
  image            String?
  isVerified       Boolean   @default(false)
  active           Boolean   @default(false)
  signupMethod     String    @default("email") @db.VarChar(20)
  subscriptionType String    @default("free")
  likedMeditations Liked[]
  playlists        Playlist[]

  @@map("users")
}

model Meditation {
  id             String           @id @default(cuid())
  title          String
  description    String?
  duration       Int
  link           String
  thumbnail      String?
  isPremium      Boolean          @default(false)
  active         Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  playCount      Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categoryId     Int
  subcategoryId  String?
  type           String?
  meditationTags MeditationTags[]
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory    Subcategory?     @relation(fields: [subcategoryId], references: [id])
  likedUsers     Liked[]
  playlistItems PlaylistMeditation[]

  @@map("meditations")
}

model Tag {
  id             String           @id @default(cuid())
  name           String           @unique
  active         Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  meditationTags MeditationTags[]

  @@map("tags")
}

model MeditationTags {
  meditationId String
  tagId        String
  meditation   Meditation @relation(fields: [meditationId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([meditationId, tagId])
  @@map("meditation_tags")
}

model Subcategory {
  id          String       @id @default(uuid())
  name        String
  description String?
  active      Boolean      @default(true)
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  Int
  color       String?
  meditations Meditation[]
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId])
  @@map("subcategories")
}


model Liked {
  id           String      @id @default(uuid())
  userId       BigInt
  meditationId String
  createdAt    DateTime    @default(now())

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  meditation   Meditation  @relation(fields: [meditationId], references: [id], onDelete: Cascade)

  @@unique([userId, meditationId])
  @@map("liked_meditations")
}

model ThoughtOfTheDay {
  id              String    @id @default(cuid())
  thumbnail       String   
  link            String
  title           String
  duration        String  
  description     String
  scheduledAt     DateTime  
  status          ThoughtStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


enum ThoughtStatus {
  PENDING   
  POSTED    
  REPOSTED  
}

model Playlist {  
  id          String              @id @default(uuid())
  name        String
  icon        String?
  description String?
  isPublic    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  userId      BigInt

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       PlaylistMeditation[]

  @@map("playlists")
}

model PlaylistMeditation {
  id           String      @id @default(uuid())
  playlistId   String
  meditationId String
  addedAt      DateTime    @default(now())
  order        Int?
  createdAt   DateTime     @default(now())

  playlist     Playlist    @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  meditation   Meditation  @relation(fields: [meditationId], references: [id], onDelete: Cascade)

  @@unique([playlistId, meditationId]) // prevent duplicate meditations in the same playlist
  @@map("playlist_meditations")
}

model Policy {
  id           String   @id @default(cuid())
  type         Int      // 1 = Privacy Policy, 2 = Terms & Conditions
  content      String
  active     Boolean  @default(true)
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("policy")
  @@index([type, active, isDeleted])
  @@index([type])
}
